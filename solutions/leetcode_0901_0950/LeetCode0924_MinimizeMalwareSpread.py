import collections
from typing import List


class DSU:
    def __init__(self, n):
        self.roots = range(n)
        self.sz = [1]*n

    def find(self, val):
        if self.roots[val] != val:
            self.roots[val] = self.find(self.roots[val])
        return self.roots[val]

    def union(self, x, y):
        xr = self.find(x)
        yr = self.find(y)
        self.roots[xr] = yr
        self.sz[yr] += self.sz[xr]

    def size(self, x):
        return self.sz[self.find(x)]


class Solution(object):
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        dsu = DSU(n)

        for i in range(n):
            for j in range(i):
                if graph[i][j]:
                    dsu.union(i, j)
        count = collections.Counter(dsu.find(u) for u in initial)

        res = (-1, min(initial))
        for node in initial:
            root = dsu.find(node)
            if count[root] == 1:
                if dsu.size(root) > res[0]:
                    res = dsu.size(root), node
                elif dsu.size(root) == res[0] and node < res[1]:
                    res = dsu.size(root), node
        return res[1]
